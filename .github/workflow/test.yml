name: Python Unit Tests
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

env:
  PYTHONWARNDEFAULTENCODING: 'true'
  PY_COLORS: 1
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: test_db
  LOCAL_DB_URL: postgresql://postgres:postgres@localhost:5432/test_db

permissions:
  contents: read
  pull-requests: write
  deployments: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Install Dependencies
        run: |
          pip install poetry
          poetry install --with dev

      - name: Run Ruff Linting
        run: poetry run ruff check .
        
  test:
    name: "Build and Test"
    needs: lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y
          
      - name: Install Dependencies
        run: |
          poetry install --with dev
          pip install psycopg2-binary
      
      - name: Fetch Railway DB connection details
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
          SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
        run: |
          set +x
          variables=$(curl -sS -X POST "https://backboard.railway.app/graphql/v2" \
            -H "Authorization: Bearer ${RAILWAY_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "query": "query(\$environmentId: String!, \$serviceId: String!, \$projectId: String!) { variables(environmentId: \$environmentId, serviceId: \$serviceId, projectId: \$projectId) }",
            "variables": {
              "environmentId": "${ENVIRONMENT_ID}",
              "serviceId": "${SERVICE_ID}",
              "projectId": "${PROJECT_ID}"
            }
          }
          EOF
          )
          
          # Parse DATABASE_URL from the response
          DATABASE_URL=$(echo "$variables" | jq -r '.data.variables.DATABASE_URL')
          echo "RAILWAY_DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV

      - name: Sync schema and data from Railway
        run: |
          # First, make the script executable
          chmod +x .github/scripts/sync_railway_data.py
          # Then run it
          python .github/scripts/sync_railway_data.py


      - name: Run tests
        env:
          DATABASE_URL: ${{ env.LOCAL_DB_URL }}
        run: |
          poetry run pytest -v
