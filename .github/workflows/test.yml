name: Python Unit Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:

env:
  PYTHONWARNDEFAULTENCODING: 'true'
  PY_COLORS: 1

permissions:
  contents: write
  pull-requests: write
  deployments: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Install Dependencies
        run: |
          pip install poetry
          poetry install --with dev

      - name: Run Ruff Linting
        run: poetry run ruff check .

  test:
    name: "Build and Test"
    needs: lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Configure GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
      - name: Download Latest Sync Artifact
        env:
          WORKFLOW_FILE: "Sync Test DB with Prod"
        run: |
          run_id=$(gh run list --workflow="$WORKFLOW_FILE" --branch=main --json databaseId,conclusion \
            -q '.[] | select(.conclusion=="success") | .databaseId' | head -n1) || exit 0
        
          [ -n "$run_id" ] && gh run download "$run_id" -n test-db-dump --dir . || echo "No artifact to download."
           

      - name: Install Dependencies
        run: | 
          pip install poetry
          poetry install --with dev

      - name: Load DB Dump If Exists
        run: |
          if [ -f dump.sql ]; then
            echo "Restoring database from dump.sql"
            PGPASSWORD=postgres psql -h localhost -U postgres -d test_db < dump.sql
          else
            echo "No previous database dump found"
          fi

      - name: Download Env Vars
        env:
          WORKFLOW_FILE: "Sync Test DB with Prod"
        run: |
          run_id=$(gh run list --workflow="$WORKFLOW_FILE" --branch=main --json databaseId,conclusion \
            -q '.[] | select(.conclusion=="success") | .databaseId' | head -n1) || exit 0
      
          [ -n "$run_id" ] && gh run download "$run_id" -n env-vars --dir . || echo "No artifact to download."


      - name: Load Environment Variables and Run Tests
        run: |
          set -o allexport
          source env_vars.env
          set +o allexport
          poetry run pytest -v
        
