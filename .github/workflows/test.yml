name: Python Unit Tests
on:
  pull_request:
      types: [labeled]
  workflow_dispatch:

env:
  PYTHONWARNDEFAULTENCODING: 'true'
  PY_COLORS: 1
  WORKFLOW_FILE: "Sync Test DB with Prod"

permissions:
  contents: read
  pull-requests: write
  deployments: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  lint:
    if: github.event.label.name == 'ci' || github.event_name == 'workflow_dispatch'
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Install Dependencies
        run: |
          pip install poetry
          poetry install --with dev

      - name: Run Ruff Linting
        run: poetry run ruff check .
        
  test:
    if: github.event.label.name == 'ci' || github.event_name == 'workflow_dispatch'
    name: "Build and Test on ${{ matrix.os }} / ${{ matrix.python-version }}"
    needs: lint
    runs-on: "${{ matrix.os }}-latest"

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    strategy:
      matrix:
        os:
          - Ubuntu
      fail-fast: true

    defaults:
      run:
        shell: bash -e -o pipefail {0}
      
    steps:
      - name: Display Current Test Matrix
        run: echo '${{ toJSON(matrix) }}'

      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Get Full Python Version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Bootstrap Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Setup UV Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure Cache is Healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }
          timeout 10s poetry run pip --version || rm -rf .venv
          
      - name: Check lock file
        run: poetry check --lock

      - name: Install Dependencies
        run: poetry install --with dev

      - name: Install GitHub CLI
        run: | 
          sudo apt-get update 
          sudo apt-get install -y gh

      - name: Configure GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token      
      
      - name: Debug GitHub CLI Auth Status
        run: gh auth status
      
      - name: Find Latest Successful Run ID
        id: find_run
        run: |
          echo "Looking for successful runs of workflow: $WORKFLOW_FILE"
          # Get all successful run IDs first, store in a variable
          all_run_ids=$(gh run list --workflow="$WORKFLOW_FILE" --limit 20 --json databaseId,conclusion --jq '.[] | select(.conclusion=="success") | .databaseId')

          # Check if the variable is empty (no successful runs found)
          if [ -z "$all_run_ids" ]; then
            echo "::error::No successful run found for workflow '$WORKFLOW_FILE'."
            exit 1
          fi

          # Now, get the first line from the variable using head
          run_id=$(echo "$all_run_ids" | head -n1)

          # Final check in case head somehow resulted in empty output
          if [ -z "$run_id" ]; then
            echo "::error::Failed to extract run_id after finding successful runs."
            exit 1
          else
            echo "Found successful run_id: $run_id"
            echo "run_id=$run_id" >> $GITHUB_OUTPUT
          fi

      
      - name: Download Latest Sync Artifact
        run: |
          echo "Attempting to download artifact 'test-db-dump' from run ${{ steps.find_run.outputs.run_id }}"
          gh run download "${{ steps.find_run.outputs.run_id }}" -n test-db-dump --dir .
          echo "Listing files after DB dump download attempt:"
          ls -l dump.sql # Check if dump.sql exists
      
      - name: Load DB Dump If Exists
        run: |
          if [ -f dump.sql ]; then
            echo "Restoring database from dump.sql"
            PGPASSWORD=postgres psql -h localhost -U postgres -d test_db < dump.sql
          else
            echo "::error::Database dump file 'dump.sql' not found after download attempt."
            exit 1
          fi

      - name: Download Env Vars Artifact
        run: |
          echo "Attempting to download artifact 'env-vars' from run ${{ steps.find_run.outputs.run_id }}"
          gh run download "${{ steps.find_run.outputs.run_id }}" -n env-vars --dir .
          echo "Listing files after env-vars download attempt:"
          ls -l env_vars.env # Check if env_vars.env exists
  

      - name: Load Environment Variables and Run Tests
        run: |
          set -o allexport
          source env_vars.env
          set +o allexport
          poetry run pytest -v
 