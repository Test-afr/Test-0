name: Python Unit Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:

env:
  PYTHONWARNDEFAULTENCODING: 'true'
  PY_COLORS: 1
  TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

permissions:
  contents: read
  pull-requests: write
  deployments: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Install Dependencies
        run: |
          pip install poetry
          poetry install --with dev

      - name: Run Ruff Linting
        run: poetry run ruff check .

  test:
    name: "Build and Test"
    needs: lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python - -y

      - name: Install Dependencies
        run: |
          poetry install --with dev
          pip install psycopg2-binary python-dotenv

      - name: Download DB Dump Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-db-dump
          path: .

      - name: Load DB Dump If Exists
        run: |
          if [ -f dump.sql ]; then
            echo "Restoring database from dump.sql"
            PGPASSWORD=postgres psql -h localhost -U postgres -d test_db < dump.sql
          else
            echo "No previous database dump found"
          fi

      - name: Run tests
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        run: poetry run pytest -v

      - name: Save DB Dump
        if: always()
        run: |
          echo "Saving current database state"
          PGPASSWORD=postgres pg_dump -h localhost -U postgres -d test_db > dump.sql

      - name: Upload DB Dump Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-db-dump
          path: dump.sql
          retention-days: 4
