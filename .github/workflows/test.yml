name: Python Unit Tests
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PYTHONWARNDEFAULTENCODING: 'true'
  PY_COLORS: 1

permissions:
  contents: read
  pull-requests: write
  deployments: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Install Dependencies
        run: |
          pip install poetry
          poetry install --with dev

      - name: Run Ruff Linting
        run: poetry run ruff check .
        
  test:
    name: "Build and Test on ${{ matrix.os }} / ${{ matrix.python-version }}"
    needs: lint
    runs-on: "${{ matrix.os }}-latest"

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    strategy:
      matrix:
        os:
          - Ubuntu
      fail-fast: true

    defaults:
      run:
        shell: bash
    steps:
      - name: Display Current Test Matrix
        run: echo '${{ toJSON(matrix) }}'

      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Get Full Python Version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Bootstrap Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Setup UV Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure Cache is Healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }
          timeout 10s poetry run pip --version || rm -rf .venv
          
      - name: Check lock file
        run: poetry check --lock

      - name: Install Dependencies
        run: poetry install --with dev
      
      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Configure GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token  
      
      - name: Download Latest Sync Artifact
        env:
          WORKFLOW_FILE: "Sync Test DB with Prod"
        run: |
          run_id=$(gh run list --workflow="$WORKFLOW_FILE" --branch=main --json databaseId,conclusion \
            -q '.[] | select(.conclusion=="success") | .databaseId' | head -n1) || exit 0
        
          [ -n "$run_id" ] && gh run download "$run_id" -n test-db-dump --dir . || echo "No artifact to download."
      
      - name: Load DB Dump If Exists
        run: |
          if [ -f dump.sql ]; then
            echo "Restoring database from dump.sql"
            PGPASSWORD=postgres psql -h localhost -U postgres -d test_db < dump.sql
          else
            echo "No previous database dump found"
          fi

      - name: Download Env Vars
        env:
          WORKFLOW_FILE: "Sync Test DB with Prod"
        run: |
          run_id=$(gh run list --workflow="$WORKFLOW_FILE" --branch=main --json databaseId,conclusion \
            -q '.[] | select(.conclusion=="success") | .databaseId' | head -n1) || exit 0
          [ -n "$run_id" ] && gh run download "$run_id" -n env-vars --dir . || echo "No artifact to download."
          mv env-vars/env_vars.env .
          ls -lah


      - name: Load Environment Variables and Run Tests
        run: |
          set -o allexport
          source env_vars.env
          set +o allexport
          poetry run pytest -v
