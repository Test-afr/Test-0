name: Sync Test DB with Prod

on:
  schedule:
    - cron: '0 1 */2 * *'   # every 2 days
  workflow_dispatch:

jobs:
  sync-db:
    runs-on: ubuntu-latest
    environment: Workflow
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'

      - name: Install Dependencies
        run: |
          pip install poetry
          poetry install --with dev

      - name: Fetch Environment Variables from Railway
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
          SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        run: |
          set +x
          variables=$(curl -sS -X POST "https://backboard.railway.app/graphql/v2" \
            -H "Authorization: Bearer ${RAILWAY_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "query": "query(\$environmentId: String!, \$serviceId: String!, \$projectId: String!) { variables(environmentId: \$environmentId, serviceId: \$serviceId, projectId: \$projectId) }",
            "variables": {
              "environmentId": "${ENVIRONMENT_ID}",
              "serviceId": "${SERVICE_ID}",
              "projectId": "${PROJECT_ID}"
            }
          }
          EOF
          )
          eval $(echo "$variables" | jq -r '.data.variables | to_entries | .[] | @sh "export \(.key)=\(.value)"')
          echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV

          poetry run python .github/scripts/sync_db.py

      - name: Save DB Dump
        run: |
          echo "Saving current database state"
          docker run --rm --network=host \
            -e PGPASSWORD=postgres \
            postgres:latest pg_dump -h localhost -U postgres -d test_db > dump.sql

      - name: Upload DB Dump Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-db-dump
          path: dump.sql
          retention-days: 4

      - name: Upload Environment Variables Artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-vars
          path: env_vars.env
          retention-days: 4
