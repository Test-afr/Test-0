name: Sync Test DB with Prod

on:
  issues:
    types: [closed]
  pull_request:
    types: [closed]
  workflow_dispatch:

jobs:
  sync-db:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Get Full Python Version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Bootstrap Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Setup UV Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure Cache is Healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Check lock file
        run: poetry check --lock
  
      - name: Install Dependencies
        run: poetry install --with dev

      - name: Fetch Environment Variables & Sync DB
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
          SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        run: |
          set +x
      
          # Fetch Railway environment variables
          variables=$(curl -sS -X POST "https://backboard.railway.app/graphql/v2" \
            -H "Authorization: Bearer ${RAILWAY_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "query": "query(\$environmentId: String!, \$serviceId: String!, \$projectId: String!) { variables(environmentId: \$environmentId, serviceId: \$serviceId, projectId: \$projectId) }",
            "variables": {
              "environmentId": "${ENVIRONMENT_ID}",
              "serviceId": "${SERVICE_ID}",
              "projectId": "${PROJECT_ID}"
            }
          }
          EOF
          )
      
          eval $(echo "$variables" | jq -r '.data.variables | to_entries | .[] | @sh "export \(.key)=\(.value)"') > env_vars.env

          # Dump the Railway database with --clean option
          pg_dump --clean "$DATABASE_PUBLIC_URL" > dump.sql

      - name: Upload DB Dump Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-db-dump
          path: dump.sql
          retention-days: 5

      - name: Upload Environment Variables Artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-vars
          path: env_vars.env
          retention-days: 5
