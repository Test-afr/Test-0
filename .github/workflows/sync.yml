name: Sync Test DB with Prod

on:
  push: {}       # triggers on every push to any branch
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    environment: Workflow
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch full history so that commit count is accurate

      - name: Check Commit Count
        id: check
        run: |
          # Count all commits across the repository
          commit_count=$(git rev-list --count --all)
          echo "Total commit count: $commit_count"
          # If the commit count is not a multiple of 10, exit with code 78 to skip the job
          if (( commit_count % 10 != 0 )); then
            echo "Not a sync commit. Skipping job."
            exit 78
          fi
          echo "This is a sync commit. Proceeding with job."

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          allow-prereleases: true

      - name: Install Dependencies
        run: |
          pip install poetry
          poetry install --with dev

      - name: Fetch Environment Variables & Sync DB
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
          SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        run: |
          set +x
          # Fetch Railway environment variables
          variables=$(curl -sS -X POST "https://backboard.railway.app/graphql/v2" \
            -H "Authorization: Bearer ${RAILWAY_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "query": "query(\$environmentId: String!, \$serviceId: String!, \$projectId: String!) { variables(environmentId: \$environmentId, serviceId: \$serviceId, projectId: \$projectId) }",
            "variables": {
              "environmentId": "${ENVIRONMENT_ID}",
              "serviceId": "${SERVICE_ID}",
              "projectId": "${PROJECT_ID}"
            }
          }
          EOF
          )
          eval $(echo "$variables" | jq -r '.data.variables | to_entries | .[] | @sh "export \(.key)=\(.value)"') > env_vars.env
          # Dump the Railway database with --clean option
          pg_dump --clean "$DATABASE_PUBLIC_URL" > dump.sql

      - name: Upload DB Dump Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-db-dump
          path: dump.sql
          retention-days: 5

      - name: Upload Environment Variables Artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-vars
          path: env_vars.env
          retention-days: 5
